#递归函数
#例：n!=1*2*3*4*5...*100
def mutil(n):
    if n = 1:
        return 1
    return n*mutil(n-1)

#递归函数优点：定义简单，逻辑清晰，但是要防止栈溢出。在计算机中，函数调用
#是通过栈这种数据结构实现的，每当进入函数调用，栈就会加一层栈帧，当函数返回时
#栈就会减一层栈帧，由于栈的大小是有限的，所以地柜调用次数过多会导致栈溢出
#为了解决栈溢出，采用的方法是尾递归，即在函数返回时，调用函数本身，且return
#语句不能包含表达式

def muti(n):
    return last_muti(n,1)

def last_muti(n,sum):
    if n==1:
        return sum
    return last_muti(n-1,n*sum)

#练习题：汉诺塔移动
#请编写move(n,a,b,c)函数，接收n，然后打印出把所有盘子从A借助B移动到C的方法
#例如：
def move(n,a,b,c):
    print(a,'->',c)

def move(n,a,b,c):
    if n ==1:
        print(a,'->',c)
    else:
        move(n-1,a,c,b)
        move(1,a,b,c)
        move(n-1,b,a,c)
